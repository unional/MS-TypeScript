=== tests/cases/compiler/extjsDefaultClass.ts ===

/**
 * File comments
 */

// TODO: Find out what will Sencha CMD do if the first line is not Ext.define(...)
//var someValue: string = "abc";
// class Boo {

// }

// export default class A extends Boo {
// 	public publicProp: string;
// 	private privateProp: string;
// 	static staticProp: string = "abc";
// 	static static2: number = 3;
// 	constructor(public publicParam: string) {
// 		super();
// 	}
// }


export default class A {
>A : Symbol(A, Decl(extjsDefaultClass.ts, 0, 0))

	constructor(public name?: string){}
>name : Symbol(name, Decl(extjsDefaultClass.ts, 23, 13))

	static staticMethod() { }
>staticMethod : Symbol(A.staticMethod, Decl(extjsDefaultClass.ts, 23, 36))

	static staticProp: string = "abc"
>staticProp : Symbol(A.staticProp, Decl(extjsDefaultClass.ts, 24, 26))

	static staticProp2: number = 3
>staticProp2 : Symbol(A.staticProp2, Decl(extjsDefaultClass.ts, 25, 34))

	public mixins = {
>mixins : Symbol(mixins, Decl(extjsDefaultClass.ts, 26, 31))

		"nameA": "a.b.c",
		"nameB": "b.c.d"
	}
	private privateProp: string
>privateProp : Symbol(privateProp, Decl(extjsDefaultClass.ts, 30, 2))

	private privateProp2 = "privateProp2"
>privateProp2 : Symbol(privateProp2, Decl(extjsDefaultClass.ts, 31, 28))

	private privateMethod() {}
>privateMethod : Symbol(privateMethod, Decl(extjsDefaultClass.ts, 32, 38))

	publicMethod() {}
>publicMethod : Symbol(publicMethod, Decl(extjsDefaultClass.ts, 33, 27))

	publicProp = 4
>publicProp : Symbol(publicProp, Decl(extjsDefaultClass.ts, 34, 18))
}
